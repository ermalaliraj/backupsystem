#!/bin/sh
#
# JBoss standalone control script
#
# chkconfig: - 80 20
# description: JBoss AS Standalone
# processname: standalone
# pidfile: /var/run/jboss-as/${JBOSS_INSTANCE}.pid
# config: /etc/jboss-as/as.conf
DEBUG=1
# Source function library.
. /etc/init.d/functions

#====================================================================
# Environment
#====================================================================
#JBOSS_INSTANCE_USER=$( basename $0 | awk -F"-" ' { print $1 } ')
#JBOSS_INSTANCE=$( basename $0 | awk -F"-" ' { print $2 } ')
#JBOSS_DIR="/opt/${JBOSS_INSTANCE_USER}web/web/${JBOSS_INSTANCE}/bin"
JBOSS_INSTANCE=jboss7
JBOSS_DIR="/opt/${JBOSS_INSTANCE}/bin"
#====================================================================
#debug
#

# Load Java configuration.
JAVA_HOME=/usr/local/java/jdk7
#JAVA_HOME=/usr/lib/jvm/java-1.7.0-openjdk-1.7.0.131-2.6.9.0.el7_3.x86_64
export JAVA_HOME

if [ -f "/opt/${JBOSS_INSTANCE}/standalone/configuration/as.conf" ]; then
# Load JBoss AS init.d configuration.
 if [ -z "$JBOSS_CONF" ]; then
   JBOSS_CONF="/opt/${JBOSS_INSTANCE}/standalone/configuration/as.conf"
 fi

 [ -r "$JBOSS_CONF" ] && . "${JBOSS_CONF}"
else
 echo ""
 echo "File /opt/${JBOSS_INSTANCE}/standalone/configuration/as.conf doesn't esists!"
 echo ""
 exit 1
fi

# Set defaults.

if [ -z "$JBOSS_HOME" ]; then
  JBOSS_HOME=/usr/share/jboss-as
fi
export JBOSS_HOME

if [ -z "$JBOSS_PIDFILE" ]; then
  JBOSS_PIDFILE=/var/run/jboss-as/${JBOSS_INSTANCE}.pid
fi
export JBOSS_PIDFILE

if [ -z "$JBOSS_CONSOLE_LOG" ]; then
  JBOSS_CONSOLE_LOG=/opt/${JBOSS_INSTANCE}/standalone/log/console.log
fi

if [ -z "$STARTUP_WAIT" ]; then
  STARTUP_WAIT=30
fi

if [ -z "$SHUTDOWN_WAIT" ]; then
  SHUTDOWN_WAIT=30
fi

if [ -z "$JBOSS_CONFIG" ]; then
  JBOSS_CONFIG=${JBOSS_CONFIG_DIR}/${SERVER_CONFIGURATION_FILE}
fi

JBOSS_SCRIPT=${SERVER_RUN_SCRIPT}

prog="${JBOSS_INSTANCE}"


if [ "$DEBUG" -eq 1 ]; then
 echo "DEBUG========================================="
 echo "JAVA_HOME           : $JAVA_HOME"
 echo "JBOSS_SCRIPT        : $JBOSS_SCRIPT"
 echo "JBOSS_HOME          : $JBOSS_HOME"
 echo "JBOSS_DIR           : $JBOSS_DIR"
 echo "JBOSS_BASE_DIR      : $JBOSS_BASE_DIR"
 echo "JBOSS_CONFIG        : $JBOSS_CONFIG"
 echo "JBOSS_BIND_ADDRESS  : $JBOSS_BIND_ADDRESS"
 echo "JBOSS_MANAGEMENT_PORT: $JBOSS_MANAGEMENT_PORT"
 echo "JBOSS_PIDFILE       : $JBOSS_PIDFILE"
 echo "JBOSS_CONSOLE_LOG   : $JBOSS_CONSOLE_LOG"
 echo "SERVER_LOG_FILE     : $SERVER_LOG_FILE"
 echo "SHUTDOWN_WAIT       : $SHUTDOWN_WAIT"
 echo "STARTUP_WAIT        : $STARTUP_WAIT"
 echo "JBOSS_USER          : $JBOSS_USER"
 echo "JBOSS_INSTANCE      : $JBOSS_INSTANCE"
 echo "prog                : $prog"

 echo "DEBUG========================================="
fi


CMD_PREFIX=''


if [ ! -z "$JBOSS_USER" ]; then
  if [ -x /etc/rc.d/init.d/functions ]; then
    CMD_PREFIX="daemon --user $JBOSS_USER"
  else
    CMD_PREFIX="su - $JBOSS_USER -c"
  fi
fi


start() {
  echo -n "Starting $prog: "
if [ -f $JBOSS_PIDFILE ]; then
    read ppid < $JBOSS_PIDFILE
    if [ `ps --pid $ppid 2> /dev/null | grep -c $ppid 2> /dev/null` -eq '1' ]; then
      echo -n "$prog is already running"
      failure
      echo
      return 1 
    else
      rm -f $JBOSS_PIDFILE
    fi
  fi
  mkdir -p $(dirname $JBOSS_CONSOLE_LOG)
  cat /dev/null > $JBOSS_CONSOLE_LOG

  mkdir -p $(dirname $JBOSS_PIDFILE)
  chown $JBOSS_USER $(dirname $JBOSS_PIDFILE) || true
  #$CMD_PREFIX JBOSS_PIDFILE=$JBOSS_PIDFILE $JBOSS_SCRIPT 2>&1 > $JBOSS_CONSOLE_LOG &
  #$CMD_PREFIX JBOSS_PIDFILE=$JBOSS_PIDFILE $JBOSS_SCRIPT &

  if [ ! -z "$JBOSS_USER" ]; then
    if [ -x /etc/rc.d/init.d/functions ]; then
     # daemon --user $JBOSS_USER LAUNCH_JBOSS_IN_BACKGROUND=1 JBOSS_PIDFILE=$JBOSS_PIDFILE $JBOSS_SCRIPT -c $JBOSS_CONFIG 2>&1 > $JBOSS_CONSOLE_LOG &
      daemon --user $JBOSS_USER LAUNCH_JBOSS_IN_BACKGROUND=1 JBOSS_PIDFILE=$JBOSS_PIDFILE $JBOSS_SCRIPT $SERVER_OPTS 2>&1 > $JBOSS_CONSOLE_LOG &
    else
	  # su - $JBOSS_USER -c "LAUNCH_JBOSS_IN_BACKGROUND=1 JBOSS_PIDFILE=$JBOSS_PIDFILE $JBOSS_SCRIPT -c $JBOSS_CONFIG" 2>&1 > $JBOSS_CONSOLE_LOG &
      su - $JBOSS_USER -c "cd ${JBOSS_HOME}/bin; JAVA_HOME=$JAVA_HOME LAUNCH_JBOSS_IN_BACKGROUND=1 JBOSS_PIDFILE=$JBOSS_PIDFILE JAVA_OPTS=\"$JAVA_OPTS\" $JBOSS_SCRIPT $SERVER_OPTS" 2>&1 > $JBOSS_CONSOLE_LOG & 
    fi
  fi

  count=0
  launched=false

  until [ $count -gt $STARTUP_WAIT ]
  do
    grep 'JBoss AS.*started in' $JBOSS_CONSOLE_LOG > /dev/null 
    if [ $? -eq 0 ] ; then
      launched=true
      break
    fi 
    sleep 1
    let count=$count+1;
  done
  
  success
  echo
  return 0
}

stop() {
  echo -n $"Stopping $prog: "
  count=0;

  if [ -f $JBOSS_PIDFILE ]; then
    read kpid < $JBOSS_PIDFILE
    let kwait=$SHUTDOWN_WAIT

    # Try issuing SIGTERM

    kill -15 $kpid
    until [ `ps --pid $kpid 2> /dev/null | grep -c $kpid 2> /dev/null` -eq '0' ] || [ $count -gt $kwait ]
    do
      sleep 1
      let count=$count+1;
    done

    if [ $count -gt $kwait ]; then
      kill -9 $kpid
    fi
  fi
  rm -f $JBOSS_PIDFILE
  success
  echo
}

status() {
  if [ -f $JBOSS_PIDFILE ]; then
    read ppid < $JBOSS_PIDFILE
    if [ `ps --pid $ppid 2> /dev/null | grep -c $ppid 2> /dev/null` -eq '1' ]; then
      echo "$prog is running (pid $ppid)"
      return 0
    else
      echo "$prog dead but pid file exists"
      return 1
    fi
  fi
  echo "$prog is not running"
  return 3
}

case "$1" in
  start)
      start
      ;;
  stop)
      stop
      ;;
  restart)
      $0 stop
      $0 start
      ;;
  status)
      status
      ;;
  *)
      ## If no parameters are given, print which are avaiable.
      echo ""
      echo "Usage: $0 {start|stop|status|restart|reload}"
      echo ""
      exit 1
      ;;
esac


